require_relative '../basetask'
require_relative '../util/param_quotes'
require_relative '../util/temp_file_name_generator'
require 'date'

module BradyW
  class DotNetInstaller < BaseTask
    include ParamQuotes

    # *Required* The XML file generated by the dotNetInstaller editor
    attr_accessor :xml_config

    # *Required* The full path of the output EXE you want generated
    attr_accessor :output

    # *Optional* Tokens to replace in the XML file before calling dotNetInstaller.  Use $(tokenName) syntax in your XML
    attr_accessor :tokens

    # *Optional* Manifest file to use when building the EXE
    attr_accessor :manifest

    def exectask
      validate
      generated_core_xml_file = generate_core_xml_file
      manifest_temp_file = generate_manifest_xml_file if @manifest
      params=[param_fslash_colon('c', generated_core_xml_file, :quote => true),
              param_fslash_colon('o', @output, :quote => true),
              param_fslash_colon('t', bootstrapper_path, :quote => true)]
      params << param_fslash_colon('Manifest', manifest_temp_file, :quote => true) if manifest_temp_file
      clean_file = lambda {
        if !ENV['PRESERVE_TEMP']
          FileUtils.rm generated_core_xml_file
          FileUtils.rm manifest_temp_file if @manifest
        end
      }
      shell "\"#{linker_path}\" #{params.join(' ')}" do |ok, status|
        if !ok then
          clean_file.call
          fail "Problem with dotNetInstaller.  Return code '#{status.exitstatus}'"
        end
      end
      clean_file.call
    end

    private

    def validate
      fail ":xml_config and :output are required" if !@xml_config || !@output
    end

    def generate_core_xml_file
      generated_file_name = TempFileNameGenerator.from_existing_file @xml_config
      tokenize_file @xml_config, generated_file_name
      generated_file_name
    end

    def generate_manifest_xml_file
      generated_file_name = TempFileNameGenerator.from_existing_file @manifest
      tokenize_file @manifest, generated_file_name
      generated_file_name
    end

    def tokenize_file(src_file_name,generated_file_name)
      File.open(generated_file_name, 'w') do |out|
        File.open src_file_name, 'r' do |input|
          input.each do |line|
            if @tokens then
              @tokens.each do |k, v|
                line.sub! token_replace(k), v.to_s
              end
            end
            out << line
          end
        end
      end
    end

    def token_replace(token)
      "$(#{token})"
    end

    def linker_path
      File.join bin_path, 'InstallerLinker.exe'
    end

    def bootstrapper_path
      File.join bin_path, 'dotNetInstaller.exe'
    end

    def bin_path
      File.join base_path, 'Bin'
    end

    def base_path
      BswTech::DnetInstallUtil.dot_net_installer_base_path
    end
  end
end