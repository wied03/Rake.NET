require 'basetask'
require 'msbuild'
require 'paraffin/fragment_updater'
require 'dot_net_installer'
require 'sign_tool'

module BradyW
  class WixCoordinator < BaseTask
    # *Required* Product version to configure in the WIX/MSBUild + DotNetInstaller
    attr_accessor :product_version

    # *Required* The directory containing your .wixproj file
    attr_accessor :wix_project_directory

    # *Required* Upgrade code that is passed on to WIX and dotnetinstaller
    attr_accessor :upgrade_code

    # *Optional* Fragment file that will be updated with Paraffin before calling MSBuild.  By default it's @wix_project_directory/paraffin/binaries.wxs
    attr_accessor :paraffin_update_fragment

    # *Optional* Location of the DotNetInstaller XML config file.  By default it's @wix_project_directory/dnetinstaller.xml
    attr_accessor :dnetinstaller_xml_config

    # *Optional* The name of the output file you want.  By default it's @wix_project_directory/bin/[Debug|Release]/Project Name v[version] Installer.exe
    attr_accessor :dnetinstaller_output_exe

    # *Optional* Properties to be used with MSBuild and DotNetInstaller
    attr_accessor :properties

    # *Optional* Debug or Release.  By default true is used
    attr_accessor :release_mode

    # *Optional* A lambda to do additional configuration on the MSBuild task (e.g. dotnet_bin_version)
    attr_accessor :msbuild_configure

    # *Optional* Path to the MSI generated by the WIX msbuild project. By default it's @wix_project_directory/bin/Debug|Release/project name.msi
    attr_accessor :msi_path

    # *Optional* Certificate subject to use with the signtool task when signing the MSI + exe
    attr_accessor :certificate_subject

    # *Optional* Description to use with the signtool task when signing the MSI + exe
    attr_accessor :description

    def initialize(parameters = :task)
      @release_mode ||= true

      yield self if block_given?
      # Need our parameters to instantiate the dependent tasks
      parseParams parameters

      # Allow Paraffin to run separately
      if @wix_project_directory || @paraffin_update_fragment then
        desc 'Updates Paraffin fragment on its own (without doing a build first)'
        paraffin = Paraffin::FragmentUpdater.new "paraffin_#{@name}" do |pf|
          pf.fragment_file = paraffin_update_fragment
        end
      end

      if not is_valid then
        log "WixCoordinator task is missing required parameters, will raise exception if executed"
        # This task specifies its own dependencies and in this case, won't specify any since we want an error to be thrown upon execution
        @dependencies = nil
        super(@name)
        return
      end

      desc 'Run MSBUild and produce an MSI for the WIX project'
      msb = BradyW::MSBuild.new "wixmsbld_#{@name}" do |m|
        m.release = @release_mode
        m.solution = wix_project_file
        m.properties = properties
        @msbuild_configure.call(m) if @msbuild_configure
      end

      if signing_code? then
        sign_msi_task_name = "signmsi_#{@name}"
        desc 'Signs the MSI produced by MSBuild'
        BradyW::SignTool.new sign_msi_task_name => msb.name do |s|
          s.subject = @certificate_subject
          s.description = @description
          s.sign_this = msi_path
        end
      end

      dnet_inst_task_name = "dnetinst_#{@name}"
      dnet_name_deps = signing_code? ? {dnet_inst_task_name => sign_msi_task_name} : dnet_inst_task_name
      desc 'Produces a complete .NET installer build'
      BradyW::DotNetInstaller.new dnet_name_deps do |inst|
        inst.xml_config = dnetinstaller_xml_config
        tokens = {:Configuration => configuration,
                  :MsiPath => msi_path}
        tokens = properties.merge tokens
        inst.tokens = tokens
        inst.output = dnetinstaller_output_exe
      end

      @dependencies = [*@dependencies] + [paraffin.name,
                                          msb.name,
                                          dnet_inst_task_name]

      if signing_code? then
        sign_exe_task_name = "signexe_#{@name}"
        desc 'Signs the finished EXE produced by the .NET installer'
        BradyW::SignTool.new sign_exe_task_name => dnet_inst_task_name do |s|
          s.subject = @certificate_subject
          s.description = @description
          s.sign_this = dnetinstaller_output_exe
        end
        @dependencies << sign_exe_task_name
      end

      # Specifying our own dependencies
      super(@name)
    end

    def exectask
      # We're just a task of dependencies
      validate
    end

    private

    def signing_code?
      @certificate_subject && @description
    end

    def wix_project_dir_name_only
      File.basename @wix_project_directory
    end

    def wix_project_file
      File.join @wix_project_directory, "#{wix_project_dir_name_only}.wixproj"
    end

    def configuration
      @release_mode ? :Release : :Debug
    end

    def bin_dir
      File.join(@wix_project_directory,
                'bin',
                configuration.to_s)
    end

    def msi_path
      @msi_path || File.join(bin_dir,
                             "#{wix_project_dir_name_only}.msi")
    end

    def dnetinstaller_output_exe
      @dnetinstaller_output_exe || File.join(bin_dir,
                                             "#{wix_project_dir_name_only} #{@product_version}.exe")
    end

    def dnetinstaller_xml_config
      @dnetinstaller_xml_config || File.join(@wix_project_directory,
                                             'dnetinstaller.xml')
    end

    def properties
      if @properties && @properties.include?(:Configuration) then
        raise "You cannot supply #{@properties[:Configuration]} for a :Configuration property.  Use the :release_mode property on the WixCoordinator task"
      end
      standard_props = {:ProductVersion => @product_version,
                        :UpgradeCode => @upgrade_code}
      @properties ? standard_props.merge(@properties) : standard_props
    end

    def paraffin_update_fragment
      @paraffin_update_fragment || File.join(@wix_project_directory, 'paraffin', 'binaries.wxs')
    end

    def validate
      raise ':product_version, :upgrade_code, :wix_project_directory are all required' unless is_valid
    end

    def is_valid
      @product_version && @upgrade_code && @wix_project_directory
    end
  end
end